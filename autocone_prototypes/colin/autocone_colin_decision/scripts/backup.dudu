#!/usr/bin/env python

import rospy

from sensor_msgs.msg import Joy
from ackermann_msgs.msg import AckermannDrive

import sys
import argparse
from sklearn.cluster import DBSCAN

fixed_speed = False
fixed_speed_value = 0
max_speed = 0
max_steering = 100

ackermann_cmd = AckermannDrive()
ackermann_pub = None

import cv2
import numpy as np
import time
import collections

class vision():

    def __init__(self):
        self.kernel = np.ones((3,3),np.uint8)
        self.cap = cv2.VideoCapture(1)


    def find_error(self):
        ret, image = self.cap.read()
        image = cv2.resize(image,(0,0),fx=0.5,fy=0.5)
        image = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)
        mean_image = image.copy()
	original = image.copy()
        image = np.float32(image)
        image = cv2.GaussianBlur(image,(5,5),0)
        image = cv2.adaptiveThreshold(image.astype(np.uint8),255,cv2.ADAPTIVE_THRESH_MEAN_C,cv2.THRESH_BINARY,7,3)
        image = cv2.erode(image,self.kernel,iterations = 1)
        image = cv2.dilate(image,self.kernel,iterations = 1)
        total_area = image.shape[0]*image.shape[1]
        _,contours,_ = cv2.findContours(image, 1, 2)

        lista_contornos = []
        for cnt in contours:
            area = cv2.contourArea(cnt)
            rect = cv2.minAreaRect(cnt)
            box = cv2.boxPoints(rect)
            box = np.int0(box)

            a = box[0]-box[1]
            b = box[1]-box[2]
            ratio = np.linalg.norm(a)/np.linalg.norm(b)
            if ratio<1: ratio = ratio**(-1)
            if area>total_area/400 and area<total_area/20 and ratio>1.5 and ratio <10:
                lista_contornos.append(cnt)
		
		
        contours = lista_contornos
        lista_contornos = []
	pontos_frame = []
        #cv2.drawContours(original, contours, -1, (0,0,255), 3)
	
        #vencedor = (image.shape[1],None) #ycentro, x0
        for cnt in contours:
            epsilon = 0.01*cv2.arcLength(cnt,True)
            approx = cv2.approxPolyDP(cnt,epsilon,True)
            mask = np.zeros(image.shape,np.uint8)
            cv2.drawContours(mask,[cv2.convexHull(cnt)],0,255,-1)
            mean_val = cv2.mean(mean_image,mask = mask)
	    
            """
            try:
                ,,angle = cv2.fitEllipse(cnt)
                if angle>90: angle=180-angle
            except:
                angle = 90
            """
			
			#   len(approx)>3 and len(approx)<10 and 

            #print(mean_val[0])		

            if mean_val[0]>180 and len(approx)>3 and len(approx)<8:
		#cv2.drawContours(original,[approx],0,255,-1)
                M = cv2.moments(approx)
		cx = int(M['m10']/M['m00'])
		cy = int(M['m01']/M['m00'])  
		pontos_frame.append([cx,cy])
		lista_contornos.append[approx]

                #if cy<vencedor[0]:
                    #cruzay = int(vx/abs(vy)*cy)
                    #vencedor = (cy,approx)
                #print righty
	
          
        if vencedor[1].__class__==None: 
            erro = 0
        else:
#	    M = cv2.moments(vencedor[1])
#	    cx = int(M['m10']/M['m00'])
#	    cy = int(M['m01']/M['m00'])  
#	    cv2.line(original,(image.shape[1]/2,image.shape[0]),(cx,xy),(255,0,0),10)
            try:
		
		#rows,cols = image.shape[:2]
		[vx,vy,x,y] = cv2.fitLine(vencedor[1], cv2.DIST_L2,0,0.01,0.01)
		#print cv2.fitLine(approx, cv2.DIST_L2,0,0.01,0.01)
		lefty = int((-x*vy/vx) + y)
		righty = int(((image.shape[1]-x)*vy/vx)+y)
		value_x = int(((image.shape[1]-1)*lefty)/(lefty-righty))
		M = cv2.moments(vencedor[1])
		cx = int(M['m10']/M['m00'])
		cy = int(M['m01']/M['m00'])  
		cv2.line(original,(image.shape[1]/2,image.shape[0]),(value_x,0),(255,0,0),10)

		#lista_contornos.append(approx)
		     
                erro = 90-(np.arctan(float(image.shape[0]-cy)/float(cx-image.shape[1]/2.)))*180./np.pi
                erro = 90-(np.arctan(float(image.shape[0])/float(value_x-image.shape[1]/2.)))*180./np.pi
                if erro>90: erro = erro-180
            except:
                erro =0

        cv2.imshow('Colin', original)
        cv2.waitKey(1)
	
        return erro

def joy_callback(data):
    global new_data 

    axes = data.axes
    buttons = data.buttons

    left_trigger = data.axes[2]
    right_trigger = data.axes[5]
    left_x_stick = data.axes[0]

    forward = (-right_trigger+1)/2.
    backward = (-left_trigger+1)/2.

    speed = forward*max_speed
    #steering = left_x_stick*max_steering

    ackermann_cmd.speed = float(speed)

    new_data = True

def routine():
    global teste
    teste = vision()

    steer_list = collections.deque(maxlen=10)

    while not rospy.is_shutdown():

        #chama funcao do catani
        #ackermann_cmd.steering_angle = float(steering)

        erro = teste.find_error()

        print("erro = "+str(erro))

        steer = 100*(-erro/30.)
        steer_list.append(steer)
	
        avg_steer = 0
        for i in steer_list:
            avg_steer += i 

        avg_steer = avg_steer / 10.

        ackermann_cmd.steering_angle = int(steer)

        ackermann_pub.publish(ackermann_cmd)

        rate.sleep()
                

if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument('-f', '--fixed_speed', action='store', dest='fix_speed',
                        default=0, required=False,
                        help="Value of fixed velocity.")
    parser.add_argument('-m ', '--max_speed', action='store', dest='max_speed',
                        default=50, required=False,
                        help="Limit of speed.")

    arguments = parser.parse_args(rospy.myargv()[1:])
    
    # car running on fixed speed
    fixed_speed_value = float(arguments.fix_speed)
    max_speed = float(arguments.max_speed)

    if fixed_speed_value > 0:
        fixed_speed = True

    rospy.init_node('line_follower', anonymous=True)

    rate = rospy.Rate(30)    

    rospy.Subscriber('/joy', Joy, joy_callback) 
    ackermann_pub = rospy.Publisher('/ackermann_cmd', AckermannDrive, queue_size=1)

    routine()

